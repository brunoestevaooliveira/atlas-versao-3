rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can read user profiles (useful for displaying reporter names, etc.)
      allow read: if true;
      // Only the user themselves can create their own profile
      allow create: if request.auth.uid == userId;
      // A user can only update their own profile
      allow update: if request.auth.uid == userId;
      // Only admins can delete users (for moderation)
      allow delete: if isAdmin();
    }

    // Rules for the 'issues' collection
    match /issues/{issueId} {
      // Anyone (even unauthenticated users) can read issues for map/dashboard display
      allow read: if true;
      // Any authenticated user can create (report) an issue
      allow create: if request.auth != null;
      // Only an admin can perform a full update or delete an issue
      allow update, delete: if isAdmin();

      // Granular update rules for specific fields
      // This allows authenticated users to perform specific actions without having full write access
      // allow update: if request.auth != null && (
      //   (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'comments']) &&
      //     request.resource.data.upvotes == resource.data.upvotes + 1) || // Upvoting
      //   isAdmin() // Admins can still update anything
      // );
    }
  }
}
